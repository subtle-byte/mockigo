// Code generated by mockigo. DO NOT EDIT.

//go:generate some command

package data_test

import match "github.com/subtle-byte/mockigo/match"
import mock "github.com/subtle-byte/mockigo/mock"
import testdata "github.com/subtle-byte/mockigo/internal/generator/testdata"
import time "time"

var _ = match.Any[int]

type FuncMock struct {
	mock *mock.Mock
}

func NewFuncMock(t mock.Testing) *FuncMock {
	t.Helper()
	return &FuncMock{mock: mock.NewMock(t)}
}

type _FuncMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *FuncMock) EXPECT() _FuncMock_Expecter {
	 return _FuncMock_Expecter{mock: _mock.mock}
}

type _FuncMock_Execute_Call struct {
	*mock.Call
}

func (_mock *FuncMock) Execute() () {
	_mock.mock.T.Helper()
	_mock.mock.Called("Execute", )
}

func (_expecter _FuncMock_Expecter) Execute() _FuncMock_Execute_Call {
	return _FuncMock_Execute_Call{Call: _expecter.mock.ExpectCall("Execute", )}
}

func (_call _FuncMock_Execute_Call) Return() _FuncMock_Execute_Call {
	_call.Call.Return()
	return _call
}

func (_call _FuncMock_Execute_Call) RunReturn(f func() ()) _FuncMock_Execute_Call {
	_call.Call.RunReturn(f)
	return _call
}

type GenericInterfaceMock[T any] struct {
	mock *mock.Mock
}

func NewGenericInterfaceMock[T any](t mock.Testing) *GenericInterfaceMock[T] {
	t.Helper()
	return &GenericInterfaceMock[T]{mock: mock.NewMock(t)}
}

type _GenericInterfaceMock_Expecter[T any] struct {
	mock *mock.Mock
}

func (_mock *GenericInterfaceMock[T]) EXPECT() _GenericInterfaceMock_Expecter[T] {
	 return _GenericInterfaceMock_Expecter[T]{mock: _mock.mock}
}

type _GenericInterfaceMock_Foo_Call[T any] struct {
	*mock.Call
}

func (_mock *GenericInterfaceMock[T]) Foo(a int, b ...T) (T) {
	_mock.mock.T.Helper()
	_args := []any{a, mock.SliceToAnySlice(b)}
	_results := _mock.mock.Called("Foo", _args...)
	_r0 := _results.Get(0).(T)
	return _r0
}

func (_expecter _GenericInterfaceMock_Expecter[T]) Foo(a match.Arg[int], b ...match.Arg[T]) _GenericInterfaceMock_Foo_Call[T] {
	_args := append([]mock.Matcher{a.Matcher}, match.ArgsToMatchers(b)...)
	return _GenericInterfaceMock_Foo_Call[T]{Call: _expecter.mock.ExpectCall("Foo", _args...)}
}

func (_call _GenericInterfaceMock_Foo_Call[T]) Return(_r0 T) _GenericInterfaceMock_Foo_Call[T] {
	_call.Call.Return(_r0)
	return _call
}

func (_call _GenericInterfaceMock_Foo_Call[T]) RunReturn(f func(a int, b ...T) (T)) _GenericInterfaceMock_Foo_Call[T] {
	_call.Call.RunReturn(f)
	return _call
}

type NilableMock struct {
	mock *mock.Mock
}

func NewNilableMock(t mock.Testing) *NilableMock {
	t.Helper()
	return &NilableMock{mock: mock.NewMock(t)}
}

type _NilableMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *NilableMock) EXPECT() _NilableMock_Expecter {
	 return _NilableMock_Expecter{mock: _mock.mock}
}

type NotExportedMock struct {
	mock *mock.Mock
}

func NewNotExportedMock(t mock.Testing) *NotExportedMock {
	t.Helper()
	return &NotExportedMock{mock: mock.NewMock(t)}
}

type _NotExportedMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *NotExportedMock) EXPECT() _NotExportedMock_Expecter {
	 return _NotExportedMock_Expecter{mock: _mock.mock}
}

type SimpleInterfaceMock struct {
	mock *mock.Mock
}

func NewSimpleInterfaceMock(t mock.Testing) *SimpleInterfaceMock {
	t.Helper()
	return &SimpleInterfaceMock{mock: mock.NewMock(t)}
}

type _SimpleInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *SimpleInterfaceMock) EXPECT() _SimpleInterfaceMock_Expecter {
	 return _SimpleInterfaceMock_Expecter{mock: _mock.mock}
}

type _SimpleInterfaceMock_Foo_Call struct {
	*mock.Call
}

func (_mock *SimpleInterfaceMock) Foo(_a0 time.Time) (testdata.Nilable, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Foo", _a0)
	var _r0 testdata.Nilable
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(testdata.Nilable)
	}
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _SimpleInterfaceMock_Expecter) Foo(_a0 match.Arg[time.Time]) _SimpleInterfaceMock_Foo_Call {
	return _SimpleInterfaceMock_Foo_Call{Call: _expecter.mock.ExpectCall("Foo", _a0.Matcher)}
}

func (_call _SimpleInterfaceMock_Foo_Call) Return(_r0 testdata.Nilable, _r1 error) _SimpleInterfaceMock_Foo_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _SimpleInterfaceMock_Foo_Call) RunReturn(f func(time.Time) (testdata.Nilable, error)) _SimpleInterfaceMock_Foo_Call {
	_call.Call.RunReturn(f)
	return _call
}
