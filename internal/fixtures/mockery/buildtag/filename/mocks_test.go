// Code generated by mockigo. DO NOT EDIT.

//go:generate mockigo 

package filename

import match "github.com/subtle-byte/mockigo/match"
import mock "github.com/subtle-byte/mockigo/mock"

var _ = match.Any[int]

type IfaceWithBuildTagInFilenameMock struct {
	mock *mock.Mock
}

func NewIfaceWithBuildTagInFilenameMock(t mock.Testing) *IfaceWithBuildTagInFilenameMock {
	t.Helper()
	return &IfaceWithBuildTagInFilenameMock{mock: mock.NewMock(t)}
}

type _IfaceWithBuildTagInFilenameMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *IfaceWithBuildTagInFilenameMock) EXPECT() _IfaceWithBuildTagInFilenameMock_Expecter {
	 return _IfaceWithBuildTagInFilenameMock_Expecter{mock: _mock.mock}
}

type _IfaceWithBuildTagInFilenameMock_Sprintf_Call struct {
	*mock.Call
}

func (_mock *IfaceWithBuildTagInFilenameMock) Sprintf(format string, a ...interface{}) (string) {
	_mock.mock.T.Helper()
	_args := []any{format, mock.SliceToAnySlice(a)}
	_results := _mock.mock.Called("Sprintf", _args...)
	_r0 := _results.Get(0).(string)
	return _r0
}

func (_expecter _IfaceWithBuildTagInFilenameMock_Expecter) Sprintf(format match.Arg[string], a ...match.Arg[interface{}]) _IfaceWithBuildTagInFilenameMock_Sprintf_Call {
	_args := append([]mock.Matcher{format.Matcher}, match.ArgsToMatchers(a)...)
	return _IfaceWithBuildTagInFilenameMock_Sprintf_Call{Call: _expecter.mock.ExpectCall("Sprintf", _args...)}
}

func (_call _IfaceWithBuildTagInFilenameMock_Sprintf_Call) Return(_r0 string) _IfaceWithBuildTagInFilenameMock_Sprintf_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _IfaceWithBuildTagInFilenameMock_Sprintf_Call) RunReturn(f func(format string, a ...interface{}) (string)) _IfaceWithBuildTagInFilenameMock_Sprintf_Call {
	_call.Call.RunReturn(f)
	return _call
}
