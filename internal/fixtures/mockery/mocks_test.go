// Code generated by mockigo. DO NOT EDIT.

//go:generate mockigo 

package mockery

import context "context"
import io "io"
import json "encoding/json"
import match "github.com/subtle-byte/mockigo/match"
import mock "github.com/subtle-byte/mockigo/mock"
import mockery_http "github.com/subtle-byte/mockigo/internal/fixtures/mockery/http"
import mockery_mockery "github.com/subtle-byte/mockigo/internal/fixtures/mockery/mockery"
import net_http "net/http"
import unsafe "unsafe"

var _ = match.Any[int]

type AMock struct {
	mock *mock.Mock
}

func NewAMock(t mock.Testing) *AMock {
	t.Helper()
	return &AMock{mock: mock.NewMock(t)}
}

type _AMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *AMock) EXPECT() _AMock_Expecter {
	 return _AMock_Expecter{mock: _mock.mock}
}

type _AMock_Call_Call struct {
	*mock.Call
}

func (_mock *AMock) Call() (B, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Call", )
	_r0 := _results.Get(0).(B)
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _AMock_Expecter) Call() _AMock_Call_Call {
	return _AMock_Call_Call{Call: _expecter.mock.ExpectCall("Call", )}
}

func (_call _AMock_Call_Call) Return(_r0 B, _r1 error) _AMock_Call_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _AMock_Call_Call) RunReturn(f func() (B, error)) _AMock_Call_Call {
	_call.Call.RunReturn(f)
	return _call
}

type AsyncProducerMock struct {
	mock *mock.Mock
}

func NewAsyncProducerMock(t mock.Testing) *AsyncProducerMock {
	t.Helper()
	return &AsyncProducerMock{mock: mock.NewMock(t)}
}

type _AsyncProducerMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *AsyncProducerMock) EXPECT() _AsyncProducerMock_Expecter {
	 return _AsyncProducerMock_Expecter{mock: _mock.mock}
}

type _AsyncProducerMock_Input_Call struct {
	*mock.Call
}

func (_mock *AsyncProducerMock) Input() (chan<- bool) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Input", )
	var _r0 chan<- bool
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(chan<- bool)
	}
	return _r0
}

func (_expecter _AsyncProducerMock_Expecter) Input() _AsyncProducerMock_Input_Call {
	return _AsyncProducerMock_Input_Call{Call: _expecter.mock.ExpectCall("Input", )}
}

func (_call _AsyncProducerMock_Input_Call) Return(_r0 chan<- bool) _AsyncProducerMock_Input_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _AsyncProducerMock_Input_Call) RunReturn(f func() (chan<- bool)) _AsyncProducerMock_Input_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _AsyncProducerMock_Output_Call struct {
	*mock.Call
}

func (_mock *AsyncProducerMock) Output() (<-chan bool) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Output", )
	var _r0 <-chan bool
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(<-chan bool)
	}
	return _r0
}

func (_expecter _AsyncProducerMock_Expecter) Output() _AsyncProducerMock_Output_Call {
	return _AsyncProducerMock_Output_Call{Call: _expecter.mock.ExpectCall("Output", )}
}

func (_call _AsyncProducerMock_Output_Call) Return(_r0 <-chan bool) _AsyncProducerMock_Output_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _AsyncProducerMock_Output_Call) RunReturn(f func() (<-chan bool)) _AsyncProducerMock_Output_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _AsyncProducerMock_Whatever_Call struct {
	*mock.Call
}

func (_mock *AsyncProducerMock) Whatever() (chan bool) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Whatever", )
	var _r0 chan bool
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(chan bool)
	}
	return _r0
}

func (_expecter _AsyncProducerMock_Expecter) Whatever() _AsyncProducerMock_Whatever_Call {
	return _AsyncProducerMock_Whatever_Call{Call: _expecter.mock.ExpectCall("Whatever", )}
}

func (_call _AsyncProducerMock_Whatever_Call) Return(_r0 chan bool) _AsyncProducerMock_Whatever_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _AsyncProducerMock_Whatever_Call) RunReturn(f func() (chan bool)) _AsyncProducerMock_Whatever_Call {
	_call.Call.RunReturn(f)
	return _call
}

type BlankMock struct {
	mock *mock.Mock
}

func NewBlankMock(t mock.Testing) *BlankMock {
	t.Helper()
	return &BlankMock{mock: mock.NewMock(t)}
}

type _BlankMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *BlankMock) EXPECT() _BlankMock_Expecter {
	 return _BlankMock_Expecter{mock: _mock.mock}
}

type _BlankMock_Create_Call struct {
	*mock.Call
}

func (_mock *BlankMock) Create(x interface{}) (error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Create", x)
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _BlankMock_Expecter) Create(x match.Arg[interface{}]) _BlankMock_Create_Call {
	return _BlankMock_Create_Call{Call: _expecter.mock.ExpectCall("Create", x.Matcher)}
}

func (_call _BlankMock_Create_Call) Return(_r0 error) _BlankMock_Create_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _BlankMock_Create_Call) RunReturn(f func(x interface{}) (error)) _BlankMock_Create_Call {
	_call.Call.RunReturn(f)
	return _call
}

type ConsulLockMock struct {
	mock *mock.Mock
}

func NewConsulLockMock(t mock.Testing) *ConsulLockMock {
	t.Helper()
	return &ConsulLockMock{mock: mock.NewMock(t)}
}

type _ConsulLockMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *ConsulLockMock) EXPECT() _ConsulLockMock_Expecter {
	 return _ConsulLockMock_Expecter{mock: _mock.mock}
}

type _ConsulLockMock_Lock_Call struct {
	*mock.Call
}

func (_mock *ConsulLockMock) Lock(_a0 <-chan struct{}) (<-chan struct{}, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Lock", _a0)
	var _r0 <-chan struct{}
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(<-chan struct{})
	}
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _ConsulLockMock_Expecter) Lock(_a0 match.Arg[<-chan struct{}]) _ConsulLockMock_Lock_Call {
	return _ConsulLockMock_Lock_Call{Call: _expecter.mock.ExpectCall("Lock", _a0.Matcher)}
}

func (_call _ConsulLockMock_Lock_Call) Return(_r0 <-chan struct{}, _r1 error) _ConsulLockMock_Lock_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _ConsulLockMock_Lock_Call) RunReturn(f func(<-chan struct{}) (<-chan struct{}, error)) _ConsulLockMock_Lock_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _ConsulLockMock_Unlock_Call struct {
	*mock.Call
}

func (_mock *ConsulLockMock) Unlock() (error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Unlock", )
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _ConsulLockMock_Expecter) Unlock() _ConsulLockMock_Unlock_Call {
	return _ConsulLockMock_Unlock_Call{Call: _expecter.mock.ExpectCall("Unlock", )}
}

func (_call _ConsulLockMock_Unlock_Call) Return(_r0 error) _ConsulLockMock_Unlock_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _ConsulLockMock_Unlock_Call) RunReturn(f func() (error)) _ConsulLockMock_Unlock_Call {
	_call.Call.RunReturn(f)
	return _call
}

type ExampleMock struct {
	mock *mock.Mock
}

func NewExampleMock(t mock.Testing) *ExampleMock {
	t.Helper()
	return &ExampleMock{mock: mock.NewMock(t)}
}

type _ExampleMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *ExampleMock) EXPECT() _ExampleMock_Expecter {
	 return _ExampleMock_Expecter{mock: _mock.mock}
}

type _ExampleMock_A_Call struct {
	*mock.Call
}

func (_mock *ExampleMock) A() (net_http.Flusher) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("A", )
	var _r0 net_http.Flusher
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(net_http.Flusher)
	}
	return _r0
}

func (_expecter _ExampleMock_Expecter) A() _ExampleMock_A_Call {
	return _ExampleMock_A_Call{Call: _expecter.mock.ExpectCall("A", )}
}

func (_call _ExampleMock_A_Call) Return(_r0 net_http.Flusher) _ExampleMock_A_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _ExampleMock_A_Call) RunReturn(f func() (net_http.Flusher)) _ExampleMock_A_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _ExampleMock_B_Call struct {
	*mock.Call
}

func (_mock *ExampleMock) B(fixtureshttp string) (mockery_http.MyStruct) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("B", fixtureshttp)
	_r0 := _results.Get(0).(mockery_http.MyStruct)
	return _r0
}

func (_expecter _ExampleMock_Expecter) B(fixtureshttp match.Arg[string]) _ExampleMock_B_Call {
	return _ExampleMock_B_Call{Call: _expecter.mock.ExpectCall("B", fixtureshttp.Matcher)}
}

func (_call _ExampleMock_B_Call) Return(_r0 mockery_http.MyStruct) _ExampleMock_B_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _ExampleMock_B_Call) RunReturn(f func(fixtureshttp string) (mockery_http.MyStruct)) _ExampleMock_B_Call {
	_call.Call.RunReturn(f)
	return _call
}

type ExpecterTestMock struct {
	mock *mock.Mock
}

func NewExpecterTestMock(t mock.Testing) *ExpecterTestMock {
	t.Helper()
	return &ExpecterTestMock{mock: mock.NewMock(t)}
}

type _ExpecterTestMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *ExpecterTestMock) EXPECT() _ExpecterTestMock_Expecter {
	 return _ExpecterTestMock_Expecter{mock: _mock.mock}
}

type _ExpecterTestMock_ManyArgsReturns_Call struct {
	*mock.Call
}

func (_mock *ExpecterTestMock) ManyArgsReturns(str string, i int) (strs []string, err error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("ManyArgsReturns", str, i)
	var _r0 []string
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.([]string)
	}
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _ExpecterTestMock_Expecter) ManyArgsReturns(str match.Arg[string], i match.Arg[int]) _ExpecterTestMock_ManyArgsReturns_Call {
	return _ExpecterTestMock_ManyArgsReturns_Call{Call: _expecter.mock.ExpectCall("ManyArgsReturns", str.Matcher, i.Matcher)}
}

func (_call _ExpecterTestMock_ManyArgsReturns_Call) Return(strs []string, err error) _ExpecterTestMock_ManyArgsReturns_Call {
	_call.Call.Return(strs, err)
	return _call
}

func (_call _ExpecterTestMock_ManyArgsReturns_Call) RunReturn(f func(str string, i int) (strs []string, err error)) _ExpecterTestMock_ManyArgsReturns_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _ExpecterTestMock_NoArg_Call struct {
	*mock.Call
}

func (_mock *ExpecterTestMock) NoArg() (string) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("NoArg", )
	_r0 := _results.Get(0).(string)
	return _r0
}

func (_expecter _ExpecterTestMock_Expecter) NoArg() _ExpecterTestMock_NoArg_Call {
	return _ExpecterTestMock_NoArg_Call{Call: _expecter.mock.ExpectCall("NoArg", )}
}

func (_call _ExpecterTestMock_NoArg_Call) Return(_r0 string) _ExpecterTestMock_NoArg_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _ExpecterTestMock_NoArg_Call) RunReturn(f func() (string)) _ExpecterTestMock_NoArg_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _ExpecterTestMock_NoReturn_Call struct {
	*mock.Call
}

func (_mock *ExpecterTestMock) NoReturn(str string) () {
	_mock.mock.T.Helper()
	_mock.mock.Called("NoReturn", str)
}

func (_expecter _ExpecterTestMock_Expecter) NoReturn(str match.Arg[string]) _ExpecterTestMock_NoReturn_Call {
	return _ExpecterTestMock_NoReturn_Call{Call: _expecter.mock.ExpectCall("NoReturn", str.Matcher)}
}

func (_call _ExpecterTestMock_NoReturn_Call) Return() _ExpecterTestMock_NoReturn_Call {
	_call.Call.Return()
	return _call
}

func (_call _ExpecterTestMock_NoReturn_Call) RunReturn(f func(str string) ()) _ExpecterTestMock_NoReturn_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _ExpecterTestMock_Variadic_Call struct {
	*mock.Call
}

func (_mock *ExpecterTestMock) Variadic(ints ...int) (error) {
	_mock.mock.T.Helper()
	_args := []any{mock.SliceToAnySlice(ints)}
	_results := _mock.mock.Called("Variadic", _args...)
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _ExpecterTestMock_Expecter) Variadic(ints ...match.Arg[int]) _ExpecterTestMock_Variadic_Call {
	_args := append([]mock.Matcher{}, match.ArgsToMatchers(ints)...)
	return _ExpecterTestMock_Variadic_Call{Call: _expecter.mock.ExpectCall("Variadic", _args...)}
}

func (_call _ExpecterTestMock_Variadic_Call) Return(_r0 error) _ExpecterTestMock_Variadic_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _ExpecterTestMock_Variadic_Call) RunReturn(f func(ints ...int) (error)) _ExpecterTestMock_Variadic_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _ExpecterTestMock_VariadicMany_Call struct {
	*mock.Call
}

func (_mock *ExpecterTestMock) VariadicMany(i int, a string, intfs ...interface{}) (error) {
	_mock.mock.T.Helper()
	_args := []any{i, a, mock.SliceToAnySlice(intfs)}
	_results := _mock.mock.Called("VariadicMany", _args...)
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _ExpecterTestMock_Expecter) VariadicMany(i match.Arg[int], a match.Arg[string], intfs ...match.Arg[interface{}]) _ExpecterTestMock_VariadicMany_Call {
	_args := append([]mock.Matcher{i.Matcher, a.Matcher}, match.ArgsToMatchers(intfs)...)
	return _ExpecterTestMock_VariadicMany_Call{Call: _expecter.mock.ExpectCall("VariadicMany", _args...)}
}

func (_call _ExpecterTestMock_VariadicMany_Call) Return(_r0 error) _ExpecterTestMock_VariadicMany_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _ExpecterTestMock_VariadicMany_Call) RunReturn(f func(i int, a string, intfs ...interface{}) (error)) _ExpecterTestMock_VariadicMany_Call {
	_call.Call.RunReturn(f)
	return _call
}

type FooerMock struct {
	mock *mock.Mock
}

func NewFooerMock(t mock.Testing) *FooerMock {
	t.Helper()
	return &FooerMock{mock: mock.NewMock(t)}
}

type _FooerMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *FooerMock) EXPECT() _FooerMock_Expecter {
	 return _FooerMock_Expecter{mock: _mock.mock}
}

type _FooerMock_Bar_Call struct {
	*mock.Call
}

func (_mock *FooerMock) Bar(f func([]int)) () {
	_mock.mock.T.Helper()
	_mock.mock.Called("Bar", f)
}

func (_expecter _FooerMock_Expecter) Bar(f match.Arg[func([]int)]) _FooerMock_Bar_Call {
	return _FooerMock_Bar_Call{Call: _expecter.mock.ExpectCall("Bar", f.Matcher)}
}

func (_call _FooerMock_Bar_Call) Return() _FooerMock_Bar_Call {
	_call.Call.Return()
	return _call
}

func (_call _FooerMock_Bar_Call) RunReturn(f func(f func([]int)) ()) _FooerMock_Bar_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _FooerMock_Baz_Call struct {
	*mock.Call
}

func (_mock *FooerMock) Baz(path string) (func(x string) string) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Baz", path)
	var _r0 func(x string) string
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(func(x string) string)
	}
	return _r0
}

func (_expecter _FooerMock_Expecter) Baz(path match.Arg[string]) _FooerMock_Baz_Call {
	return _FooerMock_Baz_Call{Call: _expecter.mock.ExpectCall("Baz", path.Matcher)}
}

func (_call _FooerMock_Baz_Call) Return(_r0 func(x string) string) _FooerMock_Baz_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _FooerMock_Baz_Call) RunReturn(f func(path string) (func(x string) string)) _FooerMock_Baz_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _FooerMock_Foo_Call struct {
	*mock.Call
}

func (_mock *FooerMock) Foo(f func(x string) string) (error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Foo", f)
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _FooerMock_Expecter) Foo(f match.Arg[func(x string) string]) _FooerMock_Foo_Call {
	return _FooerMock_Foo_Call{Call: _expecter.mock.ExpectCall("Foo", f.Matcher)}
}

func (_call _FooerMock_Foo_Call) Return(_r0 error) _FooerMock_Foo_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _FooerMock_Foo_Call) RunReturn(f func(f func(x string) string) (error)) _FooerMock_Foo_Call {
	_call.Call.RunReturn(f)
	return _call
}

type FuncArgsCollisionMock struct {
	mock *mock.Mock
}

func NewFuncArgsCollisionMock(t mock.Testing) *FuncArgsCollisionMock {
	t.Helper()
	return &FuncArgsCollisionMock{mock: mock.NewMock(t)}
}

type _FuncArgsCollisionMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *FuncArgsCollisionMock) EXPECT() _FuncArgsCollisionMock_Expecter {
	 return _FuncArgsCollisionMock_Expecter{mock: _mock.mock}
}

type _FuncArgsCollisionMock_Foo_Call struct {
	*mock.Call
}

func (_mock *FuncArgsCollisionMock) Foo(ret interface{}) (error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Foo", ret)
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _FuncArgsCollisionMock_Expecter) Foo(ret match.Arg[interface{}]) _FuncArgsCollisionMock_Foo_Call {
	return _FuncArgsCollisionMock_Foo_Call{Call: _expecter.mock.ExpectCall("Foo", ret.Matcher)}
}

func (_call _FuncArgsCollisionMock_Foo_Call) Return(_r0 error) _FuncArgsCollisionMock_Foo_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _FuncArgsCollisionMock_Foo_Call) RunReturn(f func(ret interface{}) (error)) _FuncArgsCollisionMock_Foo_Call {
	_call.Call.RunReturn(f)
	return _call
}

type HasConflictingNestedImportsMock struct {
	mock *mock.Mock
}

func NewHasConflictingNestedImportsMock(t mock.Testing) *HasConflictingNestedImportsMock {
	t.Helper()
	return &HasConflictingNestedImportsMock{mock: mock.NewMock(t)}
}

type _HasConflictingNestedImportsMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *HasConflictingNestedImportsMock) EXPECT() _HasConflictingNestedImportsMock_Expecter {
	 return _HasConflictingNestedImportsMock_Expecter{mock: _mock.mock}
}

type _HasConflictingNestedImportsMock_Get_Call struct {
	*mock.Call
}

func (_mock *HasConflictingNestedImportsMock) Get(path string) (net_http.Response, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", path)
	_r0 := _results.Get(0).(net_http.Response)
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _HasConflictingNestedImportsMock_Expecter) Get(path match.Arg[string]) _HasConflictingNestedImportsMock_Get_Call {
	return _HasConflictingNestedImportsMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", path.Matcher)}
}

func (_call _HasConflictingNestedImportsMock_Get_Call) Return(_r0 net_http.Response, _r1 error) _HasConflictingNestedImportsMock_Get_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _HasConflictingNestedImportsMock_Get_Call) RunReturn(f func(path string) (net_http.Response, error)) _HasConflictingNestedImportsMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _HasConflictingNestedImportsMock_Z_Call struct {
	*mock.Call
}

func (_mock *HasConflictingNestedImportsMock) Z() (mockery_http.MyStruct) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Z", )
	_r0 := _results.Get(0).(mockery_http.MyStruct)
	return _r0
}

func (_expecter _HasConflictingNestedImportsMock_Expecter) Z() _HasConflictingNestedImportsMock_Z_Call {
	return _HasConflictingNestedImportsMock_Z_Call{Call: _expecter.mock.ExpectCall("Z", )}
}

func (_call _HasConflictingNestedImportsMock_Z_Call) Return(_r0 mockery_http.MyStruct) _HasConflictingNestedImportsMock_Z_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _HasConflictingNestedImportsMock_Z_Call) RunReturn(f func() (mockery_http.MyStruct)) _HasConflictingNestedImportsMock_Z_Call {
	_call.Call.RunReturn(f)
	return _call
}

type ImportsSameAsPackageMock struct {
	mock *mock.Mock
}

func NewImportsSameAsPackageMock(t mock.Testing) *ImportsSameAsPackageMock {
	t.Helper()
	return &ImportsSameAsPackageMock{mock: mock.NewMock(t)}
}

type _ImportsSameAsPackageMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *ImportsSameAsPackageMock) EXPECT() _ImportsSameAsPackageMock_Expecter {
	 return _ImportsSameAsPackageMock_Expecter{mock: _mock.mock}
}

type _ImportsSameAsPackageMock_A_Call struct {
	*mock.Call
}

func (_mock *ImportsSameAsPackageMock) A() (mockery_mockery.B) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("A", )
	_r0 := _results.Get(0).(mockery_mockery.B)
	return _r0
}

func (_expecter _ImportsSameAsPackageMock_Expecter) A() _ImportsSameAsPackageMock_A_Call {
	return _ImportsSameAsPackageMock_A_Call{Call: _expecter.mock.ExpectCall("A", )}
}

func (_call _ImportsSameAsPackageMock_A_Call) Return(_r0 mockery_mockery.B) _ImportsSameAsPackageMock_A_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _ImportsSameAsPackageMock_A_Call) RunReturn(f func() (mockery_mockery.B)) _ImportsSameAsPackageMock_A_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _ImportsSameAsPackageMock_B_Call struct {
	*mock.Call
}

func (_mock *ImportsSameAsPackageMock) B() (KeyManager) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("B", )
	var _r0 KeyManager
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(KeyManager)
	}
	return _r0
}

func (_expecter _ImportsSameAsPackageMock_Expecter) B() _ImportsSameAsPackageMock_B_Call {
	return _ImportsSameAsPackageMock_B_Call{Call: _expecter.mock.ExpectCall("B", )}
}

func (_call _ImportsSameAsPackageMock_B_Call) Return(_r0 KeyManager) _ImportsSameAsPackageMock_B_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _ImportsSameAsPackageMock_B_Call) RunReturn(f func() (KeyManager)) _ImportsSameAsPackageMock_B_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _ImportsSameAsPackageMock_C_Call struct {
	*mock.Call
}

func (_mock *ImportsSameAsPackageMock) C(_a0 C) () {
	_mock.mock.T.Helper()
	_mock.mock.Called("C", _a0)
}

func (_expecter _ImportsSameAsPackageMock_Expecter) C(_a0 match.Arg[C]) _ImportsSameAsPackageMock_C_Call {
	return _ImportsSameAsPackageMock_C_Call{Call: _expecter.mock.ExpectCall("C", _a0.Matcher)}
}

func (_call _ImportsSameAsPackageMock_C_Call) Return() _ImportsSameAsPackageMock_C_Call {
	_call.Call.Return()
	return _call
}

func (_call _ImportsSameAsPackageMock_C_Call) RunReturn(f func(C) ()) _ImportsSameAsPackageMock_C_Call {
	_call.Call.RunReturn(f)
	return _call
}

type KeyManagerMock struct {
	mock *mock.Mock
}

func NewKeyManagerMock(t mock.Testing) *KeyManagerMock {
	t.Helper()
	return &KeyManagerMock{mock: mock.NewMock(t)}
}

type _KeyManagerMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *KeyManagerMock) EXPECT() _KeyManagerMock_Expecter {
	 return _KeyManagerMock_Expecter{mock: _mock.mock}
}

type _KeyManagerMock_GetKey_Call struct {
	*mock.Call
}

func (_mock *KeyManagerMock) GetKey(_a0 string, _a1 uint16) ([]byte, *Err) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("GetKey", _a0, _a1)
	var _r0 []byte
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.([]byte)
	}
	var _r1 *Err
	if _got := _results.Get(1); _got != nil {
		_r1 = _got.(*Err)
	}
	return _r0, _r1
}

func (_expecter _KeyManagerMock_Expecter) GetKey(_a0 match.Arg[string], _a1 match.Arg[uint16]) _KeyManagerMock_GetKey_Call {
	return _KeyManagerMock_GetKey_Call{Call: _expecter.mock.ExpectCall("GetKey", _a0.Matcher, _a1.Matcher)}
}

func (_call _KeyManagerMock_GetKey_Call) Return(_r0 []byte, _r1 *Err) _KeyManagerMock_GetKey_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _KeyManagerMock_GetKey_Call) RunReturn(f func(string, uint16) ([]byte, *Err)) _KeyManagerMock_GetKey_Call {
	_call.Call.RunReturn(f)
	return _call
}

type MapFuncMock struct {
	mock *mock.Mock
}

func NewMapFuncMock(t mock.Testing) *MapFuncMock {
	t.Helper()
	return &MapFuncMock{mock: mock.NewMock(t)}
}

type _MapFuncMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *MapFuncMock) EXPECT() _MapFuncMock_Expecter {
	 return _MapFuncMock_Expecter{mock: _mock.mock}
}

type _MapFuncMock_Get_Call struct {
	*mock.Call
}

func (_mock *MapFuncMock) Get(m map[string]func(string) string) (error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", m)
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _MapFuncMock_Expecter) Get(m match.Arg[map[string]func(string) string]) _MapFuncMock_Get_Call {
	return _MapFuncMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", m.Matcher)}
}

func (_call _MapFuncMock_Get_Call) Return(_r0 error) _MapFuncMock_Get_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _MapFuncMock_Get_Call) RunReturn(f func(m map[string]func(string) string) (error)) _MapFuncMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type MapToInterfaceMock struct {
	mock *mock.Mock
}

func NewMapToInterfaceMock(t mock.Testing) *MapToInterfaceMock {
	t.Helper()
	return &MapToInterfaceMock{mock: mock.NewMock(t)}
}

type _MapToInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *MapToInterfaceMock) EXPECT() _MapToInterfaceMock_Expecter {
	 return _MapToInterfaceMock_Expecter{mock: _mock.mock}
}

type _MapToInterfaceMock_Foo_Call struct {
	*mock.Call
}

func (_mock *MapToInterfaceMock) Foo(arg1 ...map[string]interface{}) () {
	_mock.mock.T.Helper()
	_args := []any{mock.SliceToAnySlice(arg1)}
	_mock.mock.Called("Foo", _args...)
}

func (_expecter _MapToInterfaceMock_Expecter) Foo(arg1 ...match.Arg[map[string]interface{}]) _MapToInterfaceMock_Foo_Call {
	_args := append([]mock.Matcher{}, match.ArgsToMatchers(arg1)...)
	return _MapToInterfaceMock_Foo_Call{Call: _expecter.mock.ExpectCall("Foo", _args...)}
}

func (_call _MapToInterfaceMock_Foo_Call) Return() _MapToInterfaceMock_Foo_Call {
	_call.Call.Return()
	return _call
}

func (_call _MapToInterfaceMock_Foo_Call) RunReturn(f func(arg1 ...map[string]interface{}) ()) _MapToInterfaceMock_Foo_Call {
	_call.Call.RunReturn(f)
	return _call
}

type MyReaderMock struct {
	mock *mock.Mock
}

func NewMyReaderMock(t mock.Testing) *MyReaderMock {
	t.Helper()
	return &MyReaderMock{mock: mock.NewMock(t)}
}

type _MyReaderMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *MyReaderMock) EXPECT() _MyReaderMock_Expecter {
	 return _MyReaderMock_Expecter{mock: _mock.mock}
}

type _MyReaderMock_Read_Call struct {
	*mock.Call
}

func (_mock *MyReaderMock) Read(p []byte) (n int, err error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Read", p)
	_r0 := _results.Get(0).(int)
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _MyReaderMock_Expecter) Read(p match.Arg[[]byte]) _MyReaderMock_Read_Call {
	return _MyReaderMock_Read_Call{Call: _expecter.mock.ExpectCall("Read", p.Matcher)}
}

func (_call _MyReaderMock_Read_Call) Return(n int, err error) _MyReaderMock_Read_Call {
	_call.Call.Return(n, err)
	return _call
}

func (_call _MyReaderMock_Read_Call) RunReturn(f func(p []byte) (n int, err error)) _MyReaderMock_Read_Call {
	_call.Call.RunReturn(f)
	return _call
}

type RequesterMock struct {
	mock *mock.Mock
}

func NewRequesterMock(t mock.Testing) *RequesterMock {
	t.Helper()
	return &RequesterMock{mock: mock.NewMock(t)}
}

type _RequesterMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RequesterMock) EXPECT() _RequesterMock_Expecter {
	 return _RequesterMock_Expecter{mock: _mock.mock}
}

type _RequesterMock_Get_Call struct {
	*mock.Call
}

func (_mock *RequesterMock) Get(path string) (string, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", path)
	_r0 := _results.Get(0).(string)
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _RequesterMock_Expecter) Get(path match.Arg[string]) _RequesterMock_Get_Call {
	return _RequesterMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", path.Matcher)}
}

func (_call _RequesterMock_Get_Call) Return(_r0 string, _r1 error) _RequesterMock_Get_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _RequesterMock_Get_Call) RunReturn(f func(path string) (string, error)) _RequesterMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type Requester2Mock struct {
	mock *mock.Mock
}

func NewRequester2Mock(t mock.Testing) *Requester2Mock {
	t.Helper()
	return &Requester2Mock{mock: mock.NewMock(t)}
}

type _Requester2Mock_Expecter struct {
	mock *mock.Mock
}

func (_mock *Requester2Mock) EXPECT() _Requester2Mock_Expecter {
	 return _Requester2Mock_Expecter{mock: _mock.mock}
}

type _Requester2Mock_Get_Call struct {
	*mock.Call
}

func (_mock *Requester2Mock) Get(path string) (error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", path)
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _Requester2Mock_Expecter) Get(path match.Arg[string]) _Requester2Mock_Get_Call {
	return _Requester2Mock_Get_Call{Call: _expecter.mock.ExpectCall("Get", path.Matcher)}
}

func (_call _Requester2Mock_Get_Call) Return(_r0 error) _Requester2Mock_Get_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _Requester2Mock_Get_Call) RunReturn(f func(path string) (error)) _Requester2Mock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type Requester3Mock struct {
	mock *mock.Mock
}

func NewRequester3Mock(t mock.Testing) *Requester3Mock {
	t.Helper()
	return &Requester3Mock{mock: mock.NewMock(t)}
}

type _Requester3Mock_Expecter struct {
	mock *mock.Mock
}

func (_mock *Requester3Mock) EXPECT() _Requester3Mock_Expecter {
	 return _Requester3Mock_Expecter{mock: _mock.mock}
}

type _Requester3Mock_Get_Call struct {
	*mock.Call
}

func (_mock *Requester3Mock) Get() (error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", )
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _Requester3Mock_Expecter) Get() _Requester3Mock_Get_Call {
	return _Requester3Mock_Get_Call{Call: _expecter.mock.ExpectCall("Get", )}
}

func (_call _Requester3Mock_Get_Call) Return(_r0 error) _Requester3Mock_Get_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _Requester3Mock_Get_Call) RunReturn(f func() (error)) _Requester3Mock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type Requester4Mock struct {
	mock *mock.Mock
}

func NewRequester4Mock(t mock.Testing) *Requester4Mock {
	t.Helper()
	return &Requester4Mock{mock: mock.NewMock(t)}
}

type _Requester4Mock_Expecter struct {
	mock *mock.Mock
}

func (_mock *Requester4Mock) EXPECT() _Requester4Mock_Expecter {
	 return _Requester4Mock_Expecter{mock: _mock.mock}
}

type _Requester4Mock_Get_Call struct {
	*mock.Call
}

func (_mock *Requester4Mock) Get() () {
	_mock.mock.T.Helper()
	_mock.mock.Called("Get", )
}

func (_expecter _Requester4Mock_Expecter) Get() _Requester4Mock_Get_Call {
	return _Requester4Mock_Get_Call{Call: _expecter.mock.ExpectCall("Get", )}
}

func (_call _Requester4Mock_Get_Call) Return() _Requester4Mock_Get_Call {
	_call.Call.Return()
	return _call
}

func (_call _Requester4Mock_Get_Call) RunReturn(f func() ()) _Requester4Mock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type RequesterArgSameAsImportMock struct {
	mock *mock.Mock
}

func NewRequesterArgSameAsImportMock(t mock.Testing) *RequesterArgSameAsImportMock {
	t.Helper()
	return &RequesterArgSameAsImportMock{mock: mock.NewMock(t)}
}

type _RequesterArgSameAsImportMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RequesterArgSameAsImportMock) EXPECT() _RequesterArgSameAsImportMock_Expecter {
	 return _RequesterArgSameAsImportMock_Expecter{mock: _mock.mock}
}

type _RequesterArgSameAsImportMock_Get_Call struct {
	*mock.Call
}

func (_mock *RequesterArgSameAsImportMock) Get(_a0 string) (*json.RawMessage) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", _a0)
	var _r0 *json.RawMessage
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(*json.RawMessage)
	}
	return _r0
}

func (_expecter _RequesterArgSameAsImportMock_Expecter) Get(_a0 match.Arg[string]) _RequesterArgSameAsImportMock_Get_Call {
	return _RequesterArgSameAsImportMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", _a0.Matcher)}
}

func (_call _RequesterArgSameAsImportMock_Get_Call) Return(_r0 *json.RawMessage) _RequesterArgSameAsImportMock_Get_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _RequesterArgSameAsImportMock_Get_Call) RunReturn(f func(json string) (*json.RawMessage)) _RequesterArgSameAsImportMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type RequesterArgSameAsNamedImportMock struct {
	mock *mock.Mock
}

func NewRequesterArgSameAsNamedImportMock(t mock.Testing) *RequesterArgSameAsNamedImportMock {
	t.Helper()
	return &RequesterArgSameAsNamedImportMock{mock: mock.NewMock(t)}
}

type _RequesterArgSameAsNamedImportMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RequesterArgSameAsNamedImportMock) EXPECT() _RequesterArgSameAsNamedImportMock_Expecter {
	 return _RequesterArgSameAsNamedImportMock_Expecter{mock: _mock.mock}
}

type _RequesterArgSameAsNamedImportMock_Get_Call struct {
	*mock.Call
}

func (_mock *RequesterArgSameAsNamedImportMock) Get(_a0 string) (*json.RawMessage) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", _a0)
	var _r0 *json.RawMessage
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(*json.RawMessage)
	}
	return _r0
}

func (_expecter _RequesterArgSameAsNamedImportMock_Expecter) Get(_a0 match.Arg[string]) _RequesterArgSameAsNamedImportMock_Get_Call {
	return _RequesterArgSameAsNamedImportMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", _a0.Matcher)}
}

func (_call _RequesterArgSameAsNamedImportMock_Get_Call) Return(_r0 *json.RawMessage) _RequesterArgSameAsNamedImportMock_Get_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _RequesterArgSameAsNamedImportMock_Get_Call) RunReturn(f func(json string) (*json.RawMessage)) _RequesterArgSameAsNamedImportMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type RequesterArgSameAsPkgMock struct {
	mock *mock.Mock
}

func NewRequesterArgSameAsPkgMock(t mock.Testing) *RequesterArgSameAsPkgMock {
	t.Helper()
	return &RequesterArgSameAsPkgMock{mock: mock.NewMock(t)}
}

type _RequesterArgSameAsPkgMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RequesterArgSameAsPkgMock) EXPECT() _RequesterArgSameAsPkgMock_Expecter {
	 return _RequesterArgSameAsPkgMock_Expecter{mock: _mock.mock}
}

type _RequesterArgSameAsPkgMock_Get_Call struct {
	*mock.Call
}

func (_mock *RequesterArgSameAsPkgMock) Get(test string) () {
	_mock.mock.T.Helper()
	_mock.mock.Called("Get", test)
}

func (_expecter _RequesterArgSameAsPkgMock_Expecter) Get(test match.Arg[string]) _RequesterArgSameAsPkgMock_Get_Call {
	return _RequesterArgSameAsPkgMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", test.Matcher)}
}

func (_call _RequesterArgSameAsPkgMock_Get_Call) Return() _RequesterArgSameAsPkgMock_Get_Call {
	_call.Call.Return()
	return _call
}

func (_call _RequesterArgSameAsPkgMock_Get_Call) RunReturn(f func(test string) ()) _RequesterArgSameAsPkgMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type RequesterArrayMock struct {
	mock *mock.Mock
}

func NewRequesterArrayMock(t mock.Testing) *RequesterArrayMock {
	t.Helper()
	return &RequesterArrayMock{mock: mock.NewMock(t)}
}

type _RequesterArrayMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RequesterArrayMock) EXPECT() _RequesterArrayMock_Expecter {
	 return _RequesterArrayMock_Expecter{mock: _mock.mock}
}

type _RequesterArrayMock_Get_Call struct {
	*mock.Call
}

func (_mock *RequesterArrayMock) Get(path string) ([2]string, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", path)
	var _r0 [2]string
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.([2]string)
	}
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _RequesterArrayMock_Expecter) Get(path match.Arg[string]) _RequesterArrayMock_Get_Call {
	return _RequesterArrayMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", path.Matcher)}
}

func (_call _RequesterArrayMock_Get_Call) Return(_r0 [2]string, _r1 error) _RequesterArrayMock_Get_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _RequesterArrayMock_Get_Call) RunReturn(f func(path string) ([2]string, error)) _RequesterArrayMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type RequesterElidedMock struct {
	mock *mock.Mock
}

func NewRequesterElidedMock(t mock.Testing) *RequesterElidedMock {
	t.Helper()
	return &RequesterElidedMock{mock: mock.NewMock(t)}
}

type _RequesterElidedMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RequesterElidedMock) EXPECT() _RequesterElidedMock_Expecter {
	 return _RequesterElidedMock_Expecter{mock: _mock.mock}
}

type _RequesterElidedMock_Get_Call struct {
	*mock.Call
}

func (_mock *RequesterElidedMock) Get(path string, url string) (error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", path, url)
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _RequesterElidedMock_Expecter) Get(path match.Arg[string], url match.Arg[string]) _RequesterElidedMock_Get_Call {
	return _RequesterElidedMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", path.Matcher, url.Matcher)}
}

func (_call _RequesterElidedMock_Get_Call) Return(_r0 error) _RequesterElidedMock_Get_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _RequesterElidedMock_Get_Call) RunReturn(f func(path string, url string) (error)) _RequesterElidedMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type RequesterIfaceMock struct {
	mock *mock.Mock
}

func NewRequesterIfaceMock(t mock.Testing) *RequesterIfaceMock {
	t.Helper()
	return &RequesterIfaceMock{mock: mock.NewMock(t)}
}

type _RequesterIfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RequesterIfaceMock) EXPECT() _RequesterIfaceMock_Expecter {
	 return _RequesterIfaceMock_Expecter{mock: _mock.mock}
}

type _RequesterIfaceMock_Get_Call struct {
	*mock.Call
}

func (_mock *RequesterIfaceMock) Get() (io.Reader) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", )
	var _r0 io.Reader
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(io.Reader)
	}
	return _r0
}

func (_expecter _RequesterIfaceMock_Expecter) Get() _RequesterIfaceMock_Get_Call {
	return _RequesterIfaceMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", )}
}

func (_call _RequesterIfaceMock_Get_Call) Return(_r0 io.Reader) _RequesterIfaceMock_Get_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _RequesterIfaceMock_Get_Call) RunReturn(f func() (io.Reader)) _RequesterIfaceMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type RequesterNSMock struct {
	mock *mock.Mock
}

func NewRequesterNSMock(t mock.Testing) *RequesterNSMock {
	t.Helper()
	return &RequesterNSMock{mock: mock.NewMock(t)}
}

type _RequesterNSMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RequesterNSMock) EXPECT() _RequesterNSMock_Expecter {
	 return _RequesterNSMock_Expecter{mock: _mock.mock}
}

type _RequesterNSMock_Get_Call struct {
	*mock.Call
}

func (_mock *RequesterNSMock) Get(path string) (net_http.Response, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", path)
	_r0 := _results.Get(0).(net_http.Response)
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _RequesterNSMock_Expecter) Get(path match.Arg[string]) _RequesterNSMock_Get_Call {
	return _RequesterNSMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", path.Matcher)}
}

func (_call _RequesterNSMock_Get_Call) Return(_r0 net_http.Response, _r1 error) _RequesterNSMock_Get_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _RequesterNSMock_Get_Call) RunReturn(f func(path string) (net_http.Response, error)) _RequesterNSMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type RequesterPtrMock struct {
	mock *mock.Mock
}

func NewRequesterPtrMock(t mock.Testing) *RequesterPtrMock {
	t.Helper()
	return &RequesterPtrMock{mock: mock.NewMock(t)}
}

type _RequesterPtrMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RequesterPtrMock) EXPECT() _RequesterPtrMock_Expecter {
	 return _RequesterPtrMock_Expecter{mock: _mock.mock}
}

type _RequesterPtrMock_Get_Call struct {
	*mock.Call
}

func (_mock *RequesterPtrMock) Get(path string) (*string, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", path)
	var _r0 *string
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(*string)
	}
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _RequesterPtrMock_Expecter) Get(path match.Arg[string]) _RequesterPtrMock_Get_Call {
	return _RequesterPtrMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", path.Matcher)}
}

func (_call _RequesterPtrMock_Get_Call) Return(_r0 *string, _r1 error) _RequesterPtrMock_Get_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _RequesterPtrMock_Get_Call) RunReturn(f func(path string) (*string, error)) _RequesterPtrMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type RequesterReturnElidedMock struct {
	mock *mock.Mock
}

func NewRequesterReturnElidedMock(t mock.Testing) *RequesterReturnElidedMock {
	t.Helper()
	return &RequesterReturnElidedMock{mock: mock.NewMock(t)}
}

type _RequesterReturnElidedMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RequesterReturnElidedMock) EXPECT() _RequesterReturnElidedMock_Expecter {
	 return _RequesterReturnElidedMock_Expecter{mock: _mock.mock}
}

type _RequesterReturnElidedMock_Get_Call struct {
	*mock.Call
}

func (_mock *RequesterReturnElidedMock) Get(path string) (a int, b int, c int, err error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", path)
	_r0 := _results.Get(0).(int)
	_r1 := _results.Get(1).(int)
	_r2 := _results.Get(2).(int)
	_r3 := _results.Error(3)
	return _r0, _r1, _r2, _r3
}

func (_expecter _RequesterReturnElidedMock_Expecter) Get(path match.Arg[string]) _RequesterReturnElidedMock_Get_Call {
	return _RequesterReturnElidedMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", path.Matcher)}
}

func (_call _RequesterReturnElidedMock_Get_Call) Return(a int, b int, c int, err error) _RequesterReturnElidedMock_Get_Call {
	_call.Call.Return(a, b, c, err)
	return _call
}

func (_call _RequesterReturnElidedMock_Get_Call) RunReturn(f func(path string) (a int, b int, c int, err error)) _RequesterReturnElidedMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type RequesterSliceMock struct {
	mock *mock.Mock
}

func NewRequesterSliceMock(t mock.Testing) *RequesterSliceMock {
	t.Helper()
	return &RequesterSliceMock{mock: mock.NewMock(t)}
}

type _RequesterSliceMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RequesterSliceMock) EXPECT() _RequesterSliceMock_Expecter {
	 return _RequesterSliceMock_Expecter{mock: _mock.mock}
}

type _RequesterSliceMock_Get_Call struct {
	*mock.Call
}

func (_mock *RequesterSliceMock) Get(path string) ([]string, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", path)
	var _r0 []string
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.([]string)
	}
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _RequesterSliceMock_Expecter) Get(path match.Arg[string]) _RequesterSliceMock_Get_Call {
	return _RequesterSliceMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", path.Matcher)}
}

func (_call _RequesterSliceMock_Get_Call) Return(_r0 []string, _r1 error) _RequesterSliceMock_Get_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _RequesterSliceMock_Get_Call) RunReturn(f func(path string) ([]string, error)) _RequesterSliceMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type RequesterVariadicMock struct {
	mock *mock.Mock
}

func NewRequesterVariadicMock(t mock.Testing) *RequesterVariadicMock {
	t.Helper()
	return &RequesterVariadicMock{mock: mock.NewMock(t)}
}

type _RequesterVariadicMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *RequesterVariadicMock) EXPECT() _RequesterVariadicMock_Expecter {
	 return _RequesterVariadicMock_Expecter{mock: _mock.mock}
}

type _RequesterVariadicMock_Get_Call struct {
	*mock.Call
}

func (_mock *RequesterVariadicMock) Get(values ...string) (bool) {
	_mock.mock.T.Helper()
	_args := []any{mock.SliceToAnySlice(values)}
	_results := _mock.mock.Called("Get", _args...)
	_r0 := _results.Get(0).(bool)
	return _r0
}

func (_expecter _RequesterVariadicMock_Expecter) Get(values ...match.Arg[string]) _RequesterVariadicMock_Get_Call {
	_args := append([]mock.Matcher{}, match.ArgsToMatchers(values)...)
	return _RequesterVariadicMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", _args...)}
}

func (_call _RequesterVariadicMock_Get_Call) Return(_r0 bool) _RequesterVariadicMock_Get_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _RequesterVariadicMock_Get_Call) RunReturn(f func(values ...string) (bool)) _RequesterVariadicMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _RequesterVariadicMock_MultiWriteToFile_Call struct {
	*mock.Call
}

func (_mock *RequesterVariadicMock) MultiWriteToFile(filename string, w ...io.Writer) (string) {
	_mock.mock.T.Helper()
	_args := []any{filename, mock.SliceToAnySlice(w)}
	_results := _mock.mock.Called("MultiWriteToFile", _args...)
	_r0 := _results.Get(0).(string)
	return _r0
}

func (_expecter _RequesterVariadicMock_Expecter) MultiWriteToFile(filename match.Arg[string], w ...match.Arg[io.Writer]) _RequesterVariadicMock_MultiWriteToFile_Call {
	_args := append([]mock.Matcher{filename.Matcher}, match.ArgsToMatchers(w)...)
	return _RequesterVariadicMock_MultiWriteToFile_Call{Call: _expecter.mock.ExpectCall("MultiWriteToFile", _args...)}
}

func (_call _RequesterVariadicMock_MultiWriteToFile_Call) Return(_r0 string) _RequesterVariadicMock_MultiWriteToFile_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _RequesterVariadicMock_MultiWriteToFile_Call) RunReturn(f func(filename string, w ...io.Writer) (string)) _RequesterVariadicMock_MultiWriteToFile_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _RequesterVariadicMock_OneInterface_Call struct {
	*mock.Call
}

func (_mock *RequesterVariadicMock) OneInterface(a ...interface{}) (bool) {
	_mock.mock.T.Helper()
	_args := []any{mock.SliceToAnySlice(a)}
	_results := _mock.mock.Called("OneInterface", _args...)
	_r0 := _results.Get(0).(bool)
	return _r0
}

func (_expecter _RequesterVariadicMock_Expecter) OneInterface(a ...match.Arg[interface{}]) _RequesterVariadicMock_OneInterface_Call {
	_args := append([]mock.Matcher{}, match.ArgsToMatchers(a)...)
	return _RequesterVariadicMock_OneInterface_Call{Call: _expecter.mock.ExpectCall("OneInterface", _args...)}
}

func (_call _RequesterVariadicMock_OneInterface_Call) Return(_r0 bool) _RequesterVariadicMock_OneInterface_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _RequesterVariadicMock_OneInterface_Call) RunReturn(f func(a ...interface{}) (bool)) _RequesterVariadicMock_OneInterface_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _RequesterVariadicMock_Sprintf_Call struct {
	*mock.Call
}

func (_mock *RequesterVariadicMock) Sprintf(format string, a ...interface{}) (string) {
	_mock.mock.T.Helper()
	_args := []any{format, mock.SliceToAnySlice(a)}
	_results := _mock.mock.Called("Sprintf", _args...)
	_r0 := _results.Get(0).(string)
	return _r0
}

func (_expecter _RequesterVariadicMock_Expecter) Sprintf(format match.Arg[string], a ...match.Arg[interface{}]) _RequesterVariadicMock_Sprintf_Call {
	_args := append([]mock.Matcher{format.Matcher}, match.ArgsToMatchers(a)...)
	return _RequesterVariadicMock_Sprintf_Call{Call: _expecter.mock.ExpectCall("Sprintf", _args...)}
}

func (_call _RequesterVariadicMock_Sprintf_Call) Return(_r0 string) _RequesterVariadicMock_Sprintf_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _RequesterVariadicMock_Sprintf_Call) RunReturn(f func(format string, a ...interface{}) (string)) _RequesterVariadicMock_Sprintf_Call {
	_call.Call.RunReturn(f)
	return _call
}

type SendFuncMock struct {
	mock *mock.Mock
}

func NewSendFuncMock(t mock.Testing) *SendFuncMock {
	t.Helper()
	return &SendFuncMock{mock: mock.NewMock(t)}
}

type _SendFuncMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *SendFuncMock) EXPECT() _SendFuncMock_Expecter {
	 return _SendFuncMock_Expecter{mock: _mock.mock}
}

type _SendFuncMock_Execute_Call struct {
	*mock.Call
}

func (_mock *SendFuncMock) Execute(ctx context.Context, data string) (int, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Execute", ctx, data)
	_r0 := _results.Get(0).(int)
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _SendFuncMock_Expecter) Execute(ctx match.Arg[context.Context], data match.Arg[string]) _SendFuncMock_Execute_Call {
	return _SendFuncMock_Execute_Call{Call: _expecter.mock.ExpectCall("Execute", ctx.Matcher, data.Matcher)}
}

func (_call _SendFuncMock_Execute_Call) Return(_r0 int, _r1 error) _SendFuncMock_Execute_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _SendFuncMock_Execute_Call) RunReturn(f func(ctx context.Context, data string) (int, error)) _SendFuncMock_Execute_Call {
	_call.Call.RunReturn(f)
	return _call
}

type SiblingMock struct {
	mock *mock.Mock
}

func NewSiblingMock(t mock.Testing) *SiblingMock {
	t.Helper()
	return &SiblingMock{mock: mock.NewMock(t)}
}

type _SiblingMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *SiblingMock) EXPECT() _SiblingMock_Expecter {
	 return _SiblingMock_Expecter{mock: _mock.mock}
}

type _SiblingMock_DoSomething_Call struct {
	*mock.Call
}

func (_mock *SiblingMock) DoSomething() () {
	_mock.mock.T.Helper()
	_mock.mock.Called("DoSomething", )
}

func (_expecter _SiblingMock_Expecter) DoSomething() _SiblingMock_DoSomething_Call {
	return _SiblingMock_DoSomething_Call{Call: _expecter.mock.ExpectCall("DoSomething", )}
}

func (_call _SiblingMock_DoSomething_Call) Return() _SiblingMock_DoSomething_Call {
	_call.Call.Return()
	return _call
}

func (_call _SiblingMock_DoSomething_Call) RunReturn(f func() ()) _SiblingMock_DoSomething_Call {
	_call.Call.RunReturn(f)
	return _call
}

type UnsafeInterfaceMock struct {
	mock *mock.Mock
}

func NewUnsafeInterfaceMock(t mock.Testing) *UnsafeInterfaceMock {
	t.Helper()
	return &UnsafeInterfaceMock{mock: mock.NewMock(t)}
}

type _UnsafeInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *UnsafeInterfaceMock) EXPECT() _UnsafeInterfaceMock_Expecter {
	 return _UnsafeInterfaceMock_Expecter{mock: _mock.mock}
}

type _UnsafeInterfaceMock_Do_Call struct {
	*mock.Call
}

func (_mock *UnsafeInterfaceMock) Do(ptr *unsafe.Pointer) () {
	_mock.mock.T.Helper()
	_mock.mock.Called("Do", ptr)
}

func (_expecter _UnsafeInterfaceMock_Expecter) Do(ptr match.Arg[*unsafe.Pointer]) _UnsafeInterfaceMock_Do_Call {
	return _UnsafeInterfaceMock_Do_Call{Call: _expecter.mock.ExpectCall("Do", ptr.Matcher)}
}

func (_call _UnsafeInterfaceMock_Do_Call) Return() _UnsafeInterfaceMock_Do_Call {
	_call.Call.Return()
	return _call
}

func (_call _UnsafeInterfaceMock_Do_Call) RunReturn(f func(ptr *unsafe.Pointer) ()) _UnsafeInterfaceMock_Do_Call {
	_call.Call.RunReturn(f)
	return _call
}

type UsesOtherPkgIfaceMock struct {
	mock *mock.Mock
}

func NewUsesOtherPkgIfaceMock(t mock.Testing) *UsesOtherPkgIfaceMock {
	t.Helper()
	return &UsesOtherPkgIfaceMock{mock: mock.NewMock(t)}
}

type _UsesOtherPkgIfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *UsesOtherPkgIfaceMock) EXPECT() _UsesOtherPkgIfaceMock_Expecter {
	 return _UsesOtherPkgIfaceMock_Expecter{mock: _mock.mock}
}

type _UsesOtherPkgIfaceMock_DoSomethingElse_Call struct {
	*mock.Call
}

func (_mock *UsesOtherPkgIfaceMock) DoSomethingElse(obj Sibling) () {
	_mock.mock.T.Helper()
	_mock.mock.Called("DoSomethingElse", obj)
}

func (_expecter _UsesOtherPkgIfaceMock_Expecter) DoSomethingElse(obj match.Arg[Sibling]) _UsesOtherPkgIfaceMock_DoSomethingElse_Call {
	return _UsesOtherPkgIfaceMock_DoSomethingElse_Call{Call: _expecter.mock.ExpectCall("DoSomethingElse", obj.Matcher)}
}

func (_call _UsesOtherPkgIfaceMock_DoSomethingElse_Call) Return() _UsesOtherPkgIfaceMock_DoSomethingElse_Call {
	_call.Call.Return()
	return _call
}

func (_call _UsesOtherPkgIfaceMock_DoSomethingElse_Call) RunReturn(f func(obj Sibling) ()) _UsesOtherPkgIfaceMock_DoSomethingElse_Call {
	_call.Call.RunReturn(f)
	return _call
}

type Requester_unexportedMock struct {
	mock *mock.Mock
}

func NewRequester_unexportedMock(t mock.Testing) *Requester_unexportedMock {
	t.Helper()
	return &Requester_unexportedMock{mock: mock.NewMock(t)}
}

type _Requester_unexportedMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *Requester_unexportedMock) EXPECT() _Requester_unexportedMock_Expecter {
	 return _Requester_unexportedMock_Expecter{mock: _mock.mock}
}

type _Requester_unexportedMock_Get_Call struct {
	*mock.Call
}

func (_mock *Requester_unexportedMock) Get() () {
	_mock.mock.T.Helper()
	_mock.mock.Called("Get", )
}

func (_expecter _Requester_unexportedMock_Expecter) Get() _Requester_unexportedMock_Get_Call {
	return _Requester_unexportedMock_Get_Call{Call: _expecter.mock.ExpectCall("Get", )}
}

func (_call _Requester_unexportedMock_Get_Call) Return() _Requester_unexportedMock_Get_Call {
	_call.Call.Return()
	return _call
}

func (_call _Requester_unexportedMock_Get_Call) RunReturn(f func() ()) _Requester_unexportedMock_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}
