// Code generated by mockigo. DO NOT EDIT.

//go:generate mockigo 

package foo

import bar__foo "github.com/subtle-byte/mockigo/internal/fixtures/mockery/example_project/bar/foo"
import match "github.com/subtle-byte/mockigo/match"
import mock "github.com/subtle-byte/mockigo/mock"

var _ = match.Any[int]

type FooMock struct {
	mock *mock.Mock
}

func NewFooMock(t mock.Testing) *FooMock {
	t.Helper()
	return &FooMock{mock: mock.NewMock(t)}
}

type _FooMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *FooMock) EXPECT() _FooMock_Expecter {
	 return _FooMock_Expecter{mock: _mock.mock}
}

type _FooMock_DoFoo_Call struct {
	*mock.Call
}

func (_mock *FooMock) DoFoo() (string) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("DoFoo", )
	_r0 := _results.Get(0).(string)
	return _r0
}

func (_expecter _FooMock_Expecter) DoFoo() _FooMock_DoFoo_Call {
	return _FooMock_DoFoo_Call{Call: _expecter.mock.ExpectCall("DoFoo", )}
}

func (_call _FooMock_DoFoo_Call) Return(_r0 string) _FooMock_DoFoo_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _FooMock_DoFoo_Call) RunReturn(f func() (string)) _FooMock_DoFoo_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _FooMock_GetBaz_Call struct {
	*mock.Call
}

func (_mock *FooMock) GetBaz() (*Baz, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("GetBaz", )
	var _r0 *Baz
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(*Baz)
	}
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _FooMock_Expecter) GetBaz() _FooMock_GetBaz_Call {
	return _FooMock_GetBaz_Call{Call: _expecter.mock.ExpectCall("GetBaz", )}
}

func (_call _FooMock_GetBaz_Call) Return(_r0 *Baz, _r1 error) _FooMock_GetBaz_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _FooMock_GetBaz_Call) RunReturn(f func() (*Baz, error)) _FooMock_GetBaz_Call {
	_call.Call.RunReturn(f)
	return _call
}

type PackageNameSameAsImportMock struct {
	mock *mock.Mock
}

func NewPackageNameSameAsImportMock(t mock.Testing) *PackageNameSameAsImportMock {
	t.Helper()
	return &PackageNameSameAsImportMock{mock: mock.NewMock(t)}
}

type _PackageNameSameAsImportMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *PackageNameSameAsImportMock) EXPECT() _PackageNameSameAsImportMock_Expecter {
	 return _PackageNameSameAsImportMock_Expecter{mock: _mock.mock}
}

type _PackageNameSameAsImportMock_NewClient_Call struct {
	*mock.Call
}

func (_mock *PackageNameSameAsImportMock) NewClient() (bar__foo.Client) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("NewClient", )
	var _r0 bar__foo.Client
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(bar__foo.Client)
	}
	return _r0
}

func (_expecter _PackageNameSameAsImportMock_Expecter) NewClient() _PackageNameSameAsImportMock_NewClient_Call {
	return _PackageNameSameAsImportMock_NewClient_Call{Call: _expecter.mock.ExpectCall("NewClient", )}
}

func (_call _PackageNameSameAsImportMock_NewClient_Call) Return(_r0 bar__foo.Client) _PackageNameSameAsImportMock_NewClient_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _PackageNameSameAsImportMock_NewClient_Call) RunReturn(f func() (bar__foo.Client)) _PackageNameSameAsImportMock_NewClient_Call {
	_call.Call.RunReturn(f)
	return _call
}
