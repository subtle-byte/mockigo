// Code generated by mockigo. DO NOT EDIT.

//go:generate mockigo 

package fixtures

import html_template "html/template"
import match "github.com/subtle-byte/mockigo/match"
import mock "github.com/subtle-byte/mockigo/mock"
import someinterface "github.com/subtle-byte/mockigo/internal/fixtures/our/some-interface"
import text_template "text/template"
import time "time"

var _ = match.Any[int]

type BarFooMock struct {
	mock *mock.Mock
}

func NewBarFooMock(t mock.Testing) *BarFooMock {
	t.Helper()
	return &BarFooMock{mock: mock.NewMock(t)}
}

type _BarFooMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *BarFooMock) EXPECT() _BarFooMock_Expecter {
	 return _BarFooMock_Expecter{mock: _mock.mock}
}

type _BarFooMock_Bar_Call struct {
	*mock.Call
}

func (_mock *BarFooMock) Bar(_a0 int) (string) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Bar", _a0)
	_r0 := _results.Get(0).(string)
	return _r0
}

func (_expecter _BarFooMock_Expecter) Bar(_a0 match.Arg[int]) _BarFooMock_Bar_Call {
	return _BarFooMock_Bar_Call{Call: _expecter.mock.ExpectCall("Bar", _a0.Matcher)}
}

func (_call _BarFooMock_Bar_Call) Return(_r0 string) _BarFooMock_Bar_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _BarFooMock_Bar_Call) RunReturn(f func(int) (string)) _BarFooMock_Bar_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _BarFooMock_Foo_Call struct {
	*mock.Call
}

func (_mock *BarFooMock) Foo(_a0 int, _a1 string) (int) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Foo", _a0, _a1)
	_r0 := _results.Get(0).(int)
	return _r0
}

func (_expecter _BarFooMock_Expecter) Foo(_a0 match.Arg[int], _a1 match.Arg[string]) _BarFooMock_Foo_Call {
	return _BarFooMock_Foo_Call{Call: _expecter.mock.ExpectCall("Foo", _a0.Matcher, _a1.Matcher)}
}

func (_call _BarFooMock_Foo_Call) Return(_r0 int) _BarFooMock_Foo_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _BarFooMock_Foo_Call) RunReturn(f func(int, string) (int)) _BarFooMock_Foo_Call {
	_call.Call.RunReturn(f)
	return _call
}

type FooBarMock struct {
	mock *mock.Mock
}

func NewFooBarMock(t mock.Testing) *FooBarMock {
	t.Helper()
	return &FooBarMock{mock: mock.NewMock(t)}
}

type _FooBarMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *FooBarMock) EXPECT() _FooBarMock_Expecter {
	 return _FooBarMock_Expecter{mock: _mock.mock}
}

type _FooBarMock_Bar_Call struct {
	*mock.Call
}

func (_mock *FooBarMock) Bar(t time.Duration) () {
	_mock.mock.T.Helper()
	_mock.mock.Called("Bar", t)
}

func (_expecter _FooBarMock_Expecter) Bar(t match.Arg[time.Duration]) _FooBarMock_Bar_Call {
	return _FooBarMock_Bar_Call{Call: _expecter.mock.ExpectCall("Bar", t.Matcher)}
}

func (_call _FooBarMock_Bar_Call) Return() _FooBarMock_Bar_Call {
	_call.Call.Return()
	return _call
}

func (_call _FooBarMock_Bar_Call) RunReturn(f func(t time.Duration) ()) _FooBarMock_Bar_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _FooBarMock_Foo_Call struct {
	*mock.Call
}

func (_mock *FooBarMock) Foo(a int) (int) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Foo", a)
	_r0 := _results.Get(0).(int)
	return _r0
}

func (_expecter _FooBarMock_Expecter) Foo(a match.Arg[int]) _FooBarMock_Foo_Call {
	return _FooBarMock_Foo_Call{Call: _expecter.mock.ExpectCall("Foo", a.Matcher)}
}

func (_call _FooBarMock_Foo_Call) Return(_r0 int) _FooBarMock_Foo_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _FooBarMock_Foo_Call) RunReturn(f func(a int) (int)) _FooBarMock_Foo_Call {
	_call.Call.RunReturn(f)
	return _call
}

type GenericComparableMock[T comparable] struct {
	mock *mock.Mock
}

func NewGenericComparableMock[T comparable](t mock.Testing) *GenericComparableMock[T] {
	t.Helper()
	return &GenericComparableMock[T]{mock: mock.NewMock(t)}
}

type _GenericComparableMock_Expecter[T comparable] struct {
	mock *mock.Mock
}

func (_mock *GenericComparableMock[T]) EXPECT() _GenericComparableMock_Expecter[T] {
	 return _GenericComparableMock_Expecter[T]{mock: _mock.mock}
}

type _GenericComparableMock_Execute_Call[T comparable] struct {
	*mock.Call
}

func (_mock *GenericComparableMock[T]) Execute() (T) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Execute", )
	_r0 := _results.Get(0).(T)
	return _r0
}

func (_expecter _GenericComparableMock_Expecter[T]) Execute() _GenericComparableMock_Execute_Call[T] {
	return _GenericComparableMock_Execute_Call[T]{Call: _expecter.mock.ExpectCall("Execute", )}
}

func (_call _GenericComparableMock_Execute_Call[T]) Return(_r0 T) _GenericComparableMock_Execute_Call[T] {
	_call.Call.Return(_r0)
	return _call
}

func (_call _GenericComparableMock_Execute_Call[T]) RunReturn(f func() (T)) _GenericComparableMock_Execute_Call[T] {
	_call.Call.RunReturn(f)
	return _call
}

type GenericFuncMock[Y someinterface.SomeInterface] struct {
	mock *mock.Mock
}

func NewGenericFuncMock[Y someinterface.SomeInterface](t mock.Testing) *GenericFuncMock[Y] {
	t.Helper()
	return &GenericFuncMock[Y]{mock: mock.NewMock(t)}
}

type _GenericFuncMock_Expecter[Y someinterface.SomeInterface] struct {
	mock *mock.Mock
}

func (_mock *GenericFuncMock[Y]) EXPECT() _GenericFuncMock_Expecter[Y] {
	 return _GenericFuncMock_Expecter[Y]{mock: _mock.mock}
}

type _GenericFuncMock_Execute_Call[Y someinterface.SomeInterface] struct {
	*mock.Call
}

func (_mock *GenericFuncMock[Y]) Execute() (Y) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Execute", )
	_r0 := _results.Get(0).(Y)
	return _r0
}

func (_expecter _GenericFuncMock_Expecter[Y]) Execute() _GenericFuncMock_Execute_Call[Y] {
	return _GenericFuncMock_Execute_Call[Y]{Call: _expecter.mock.ExpectCall("Execute", )}
}

func (_call _GenericFuncMock_Execute_Call[Y]) Return(_r0 Y) _GenericFuncMock_Execute_Call[Y] {
	_call.Call.Return(_r0)
	return _call
}

func (_call _GenericFuncMock_Execute_Call[Y]) RunReturn(f func() (Y)) _GenericFuncMock_Execute_Call[Y] {
	_call.Call.RunReturn(f)
	return _call
}

type GenericInterfaceMock[T any, B someinterface.SomeInterface, G ~int | float32] struct {
	mock *mock.Mock
}

func NewGenericInterfaceMock[T any, B someinterface.SomeInterface, G ~int | float32](t mock.Testing) *GenericInterfaceMock[T, B, G] {
	t.Helper()
	return &GenericInterfaceMock[T, B, G]{mock: mock.NewMock(t)}
}

type _GenericInterfaceMock_Expecter[T any, B someinterface.SomeInterface, G ~int | float32] struct {
	mock *mock.Mock
}

func (_mock *GenericInterfaceMock[T, B, G]) EXPECT() _GenericInterfaceMock_Expecter[T, B, G] {
	 return _GenericInterfaceMock_Expecter[T, B, G]{mock: _mock.mock}
}

type _GenericInterfaceMock_SomeMethod_Call[T any, B someinterface.SomeInterface, G ~int | float32] struct {
	*mock.Call
}

func (_mock *GenericInterfaceMock[T, B, G]) SomeMethod(_a0 B) (T) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("SomeMethod", _a0)
	_r0 := _results.Get(0).(T)
	return _r0
}

func (_expecter _GenericInterfaceMock_Expecter[T, B, G]) SomeMethod(_a0 match.Arg[B]) _GenericInterfaceMock_SomeMethod_Call[T, B, G] {
	return _GenericInterfaceMock_SomeMethod_Call[T, B, G]{Call: _expecter.mock.ExpectCall("SomeMethod", _a0.Matcher)}
}

func (_call _GenericInterfaceMock_SomeMethod_Call[T, B, G]) Return(_r0 T) _GenericInterfaceMock_SomeMethod_Call[T, B, G] {
	_call.Call.Return(_r0)
	return _call
}

func (_call _GenericInterfaceMock_SomeMethod_Call[T, B, G]) RunReturn(f func(B) (T)) _GenericInterfaceMock_SomeMethod_Call[T, B, G] {
	_call.Call.RunReturn(f)
	return _call
}

type SimpleInterfaceMock struct {
	mock *mock.Mock
}

func NewSimpleInterfaceMock(t mock.Testing) *SimpleInterfaceMock {
	t.Helper()
	return &SimpleInterfaceMock{mock: mock.NewMock(t)}
}

type _SimpleInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *SimpleInterfaceMock) EXPECT() _SimpleInterfaceMock_Expecter {
	 return _SimpleInterfaceMock_Expecter{mock: _mock.mock}
}

type _SimpleInterfaceMock_Bar_Call struct {
	*mock.Call
}

func (_mock *SimpleInterfaceMock) Bar(i int) (int) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Bar", i)
	_r0 := _results.Get(0).(int)
	return _r0
}

func (_expecter _SimpleInterfaceMock_Expecter) Bar(i match.Arg[int]) _SimpleInterfaceMock_Bar_Call {
	return _SimpleInterfaceMock_Bar_Call{Call: _expecter.mock.ExpectCall("Bar", i.Matcher)}
}

func (_call _SimpleInterfaceMock_Bar_Call) Return(_r0 int) _SimpleInterfaceMock_Bar_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _SimpleInterfaceMock_Bar_Call) RunReturn(f func(i int) (int)) _SimpleInterfaceMock_Bar_Call {
	_call.Call.RunReturn(f)
	return _call
}

type SomeInterfaceMock struct {
	mock *mock.Mock
}

func NewSomeInterfaceMock(t mock.Testing) *SomeInterfaceMock {
	t.Helper()
	return &SomeInterfaceMock{mock: mock.NewMock(t)}
}

type _SomeInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *SomeInterfaceMock) EXPECT() _SomeInterfaceMock_Expecter {
	 return _SomeInterfaceMock_Expecter{mock: _mock.mock}
}

type _SomeInterfaceMock_Foo_Call struct {
	*mock.Call
}

func (_mock *SomeInterfaceMock) Foo(i text_template.Template) (html_template.Template) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Foo", i)
	_r0 := _results.Get(0).(html_template.Template)
	return _r0
}

func (_expecter _SomeInterfaceMock_Expecter) Foo(i match.Arg[text_template.Template]) _SomeInterfaceMock_Foo_Call {
	return _SomeInterfaceMock_Foo_Call{Call: _expecter.mock.ExpectCall("Foo", i.Matcher)}
}

func (_call _SomeInterfaceMock_Foo_Call) Return(_r0 html_template.Template) _SomeInterfaceMock_Foo_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _SomeInterfaceMock_Foo_Call) RunReturn(f func(i text_template.Template) (html_template.Template)) _SomeInterfaceMock_Foo_Call {
	_call.Call.RunReturn(f)
	return _call
}

type VariadicMock struct {
	mock *mock.Mock
}

func NewVariadicMock(t mock.Testing) *VariadicMock {
	t.Helper()
	return &VariadicMock{mock: mock.NewMock(t)}
}

type _VariadicMock_Expecter struct {
	mock *mock.Mock
}

func (_mock *VariadicMock) EXPECT() _VariadicMock_Expecter {
	 return _VariadicMock_Expecter{mock: _mock.mock}
}

type _VariadicMock_SomeMethod_Call struct {
	*mock.Call
}

func (_mock *VariadicMock) SomeMethod(a int, b ...string) (bool) {
	_mock.mock.T.Helper()
	_args := []any{a, mock.SliceToAnySlice(b)}
	_results := _mock.mock.Called("SomeMethod", _args...)
	_r0 := _results.Get(0).(bool)
	return _r0
}

func (_expecter _VariadicMock_Expecter) SomeMethod(a match.Arg[int], b ...match.Arg[string]) _VariadicMock_SomeMethod_Call {
	_args := append([]mock.Matcher{a.Matcher}, match.ArgsToMatchers(b)...)
	return _VariadicMock_SomeMethod_Call{Call: _expecter.mock.ExpectCall("SomeMethod", _args...)}
}

func (_call _VariadicMock_SomeMethod_Call) Return(_r0 bool) _VariadicMock_SomeMethod_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _VariadicMock_SomeMethod_Call) RunReturn(f func(a int, b ...string) (bool)) _VariadicMock_SomeMethod_Call {
	_call.Call.RunReturn(f)
	return _call
}
